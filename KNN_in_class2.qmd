---
title: "KNN"
format: html
editor: visual
---

## Set up

```{r}
library(tidyverse)
library(class)
library(caret)
```

## Read data

Câu lệnh đầu là gán url. Câu lệnh sau đó mới là đọc.

```{r}
url <- "https://raw.githubusercontent.com/businessdatasolutions/courses/main/data%20mining/gitbook/datasets/breastcancer.csv"
rawDF <- read_csv(url)
# Xem data
View(rawDF)
```

## Data Understanding

```{r}
str(rawDF)
```

Things to do in DU: make visualization (diagnosis plot color)

## Data Preparation

```{r}
cleanDF <- rawDF[-1]
head(cleanDF)
```

```{r}
cntDiag <- table(cleanDF$diagnosis)
propDiag <- round(prop.table(cntDiag) * 100 , digits = 1)

cntDiag
propDiag
```

```{r}
cleanDF$diagnosis <- factor(cleanDF$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malignant")) %>% relevel("Malignant")
head(cleanDF, 10)
```

```{r}
summary(cleanDF[c("radius_mean", "area_mean", "smoothness_mean")])
```

KNN nhạy với scale nên nếu số quá lớn, vài dữ liệu số quá nhỏ thì weighing sẽ khác nhau, bởi vậy cần viết lệnh normalization Hàm cat??? cùng print nhưng thêm xuống dòng?

```{r}
normalize <- function(x) { # Function takes in a vector
  return ((x - min(x)) / (max(x) - min(x))) # distance of item value - minimum vector value divided by the range of all vector values
}

testSet1 <- c(1:5)
testSet2 <- c(1:5) * 10

cat("testSet1:", testSet1, "\n")
cat("testSet2:", testSet2, "\n")
cat("Normalized testSet1:", normalize(testSet1), "\n")
cat("Normalized testSet2:", normalize(testSet2))
```

```{r}
nCols <- dim(cleanDF)[2]
cleanDF_n <- sapply(2:nCols,
                    function(x) {
  normalize(cleanDF[,x])
}) %>% as.data.frame()

summary(cleanDF_n[c("radius_mean", "area_mean", "smoothness_mean")])
```

#Luôn rescale và normalize data trong model dù maybe data sets ko có vấn đề gì Chia data thành train and test

```{r}
trainDF_feat <- cleanDF_n[1:469,  ]
testDF_feat <- cleanDF_n[470:569,  ]
```

```{r}
trainDF_labels <- cleanDF[1:469,  1]
testDF_labels <- cleanDF[470:569,  1]
```

## Modeling

```{r}
cleanDF_test_pred <- knn(train = as.matrix(trainDF_feat), test = as.matrix(testDF_feat), cl = as.matrix(trainDF_labels), k = 21)
head(cleanDF_test_pred)
```

```{r}
confusionMatrix(cleanDF_test_pred, testDF_labels[[1]], positive = NULL, dnn = c("Prediction", "True"))
```
